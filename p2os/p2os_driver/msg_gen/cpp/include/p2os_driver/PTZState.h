/* Auto-generated by genmsg_cpp for file /home/jfasola/fuerte_workspace/sandbox/p2os/p2os_driver/msg/PTZState.msg */
#ifndef P2OS_DRIVER_MESSAGE_PTZSTATE_H
#define P2OS_DRIVER_MESSAGE_PTZSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace p2os_driver
{
template <class ContainerAllocator>
struct PTZState_ {
  typedef PTZState_<ContainerAllocator> Type;

  PTZState_()
  : pan(0)
  , tilt(0)
  , zoom(0)
  , relative(false)
  {
  }

  PTZState_(const ContainerAllocator& _alloc)
  : pan(0)
  , tilt(0)
  , zoom(0)
  , relative(false)
  {
  }

  typedef int32_t _pan_type;
  int32_t pan;

  typedef int32_t _tilt_type;
  int32_t tilt;

  typedef int32_t _zoom_type;
  int32_t zoom;

  typedef uint8_t _relative_type;
  uint8_t relative;


  typedef boost::shared_ptr< ::p2os_driver::PTZState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p2os_driver::PTZState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PTZState
typedef  ::p2os_driver::PTZState_<std::allocator<void> > PTZState;

typedef boost::shared_ptr< ::p2os_driver::PTZState> PTZStatePtr;
typedef boost::shared_ptr< ::p2os_driver::PTZState const> PTZStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::p2os_driver::PTZState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::p2os_driver::PTZState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace p2os_driver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::p2os_driver::PTZState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::p2os_driver::PTZState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::p2os_driver::PTZState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1f71ce2a42b32376ea869eb051358045";
  }

  static const char* value(const  ::p2os_driver::PTZState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1f71ce2a42b32376ULL;
  static const uint64_t static_value2 = 0xea869eb051358045ULL;
};

template<class ContainerAllocator>
struct DataType< ::p2os_driver::PTZState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "p2os_driver/PTZState";
  }

  static const char* value(const  ::p2os_driver::PTZState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::p2os_driver::PTZState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 pan\n\
int32 tilt\n\
int32 zoom\n\
bool relative\n\
\n\
";
  }

  static const char* value(const  ::p2os_driver::PTZState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::p2os_driver::PTZState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::p2os_driver::PTZState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pan);
    stream.next(m.tilt);
    stream.next(m.zoom);
    stream.next(m.relative);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PTZState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p2os_driver::PTZState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::p2os_driver::PTZState_<ContainerAllocator> & v) 
  {
    s << indent << "pan: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pan);
    s << indent << "tilt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tilt);
    s << indent << "zoom: ";
    Printer<int32_t>::stream(s, indent + "  ", v.zoom);
    s << indent << "relative: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relative);
  }
};


} // namespace message_operations
} // namespace ros

#endif // P2OS_DRIVER_MESSAGE_PTZSTATE_H

